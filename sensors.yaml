# Weather prediction
  - platform: yr

# System monitor
  - platform: systemmonitor
    resources:
      - type: last_boot
      - type: memory_free
      - type: disk_free
        arg: /home
      - type: memory_use
      - type: network_in
        arg: eth0
      - type: network_out
        arg: eth0
      - type: ipv4_address
      - type: processor_use
      
  - platform: uptime

  - platform: version

  - platform: rpi_power
    text_state: true

  - platform: rova
    zip_code: !secret postcode
    house_number: !secret huisnummer
    monitored_conditions:
      - bio
      - paper

  - platform: time_date
    display_options:
      - 'date'
      - 'time'

  - platform: buienradar
    latitude: !secret latitude
    longitude: !secret longitude
    monitored_conditions:
      - stationname
      - conditioncode
      - condition
      - conditiondetailed
      - conditionexact
      - symbol
      - humidity
      - temperature
      - groundtemperature
      - windspeed
      - windforce
      - winddirection
      - windazimuth
      - pressure
      - visibility
      - windgust
      - precipitation
      - irradiance
      - precipitation_forecast_average
      - precipitation_forecast_total   
      - barometerfc
      - barometerfcname

  - platform: dsmr
    port: /dev/ttyUSB0
    dsmr_version: 4

  - platform: plex
    host: !secret host_plex
    token: !secret token_plex

  - platform: radarr
    port: !secret radarr_port
    host: !secret radarr_host
    api_key: !secret radarr_api
  
  - platform: sonarr
    port: !secret sonarr_port
    host: !secret sonarr_host
    api_key: !secret sonarr_api
    days: 7

  - platform: postnl
    username: !secret email_martijn 
    password: !secret postnl_password

  - platform: sql
    db_url: !secret mariadb_url
    scan_interval: 7200
    queries:
      - name: hass_db_size
        query: 'SELECT table_schema "database", Round(Sum(data_length + index_length) / 1024 / 1024, 1) "value" FROM information_schema.tables WHERE table_schema="homeassistant" GROUP BY table_schema'
        column: 'value'
        unit_of_measurement: MB

  - platform: cert_expiry
    host: moostmartijn.duckdns.org

  - platform: rest
    resource: !secret sabnzbd_rest
    method: GET
    name: Sabnzbd Last Downloaded 
    value_template: '{{ value_json.history.slots[0].name }}'

  - platform: rest
    resource: https://s3.amazonaws.com/hassio-version/stable.json
    name: Latest Version
    value_template: "{{ value_json.homeassistant.raspberrypi3 }}"
    scan_interval: 3600

  - platform: reddit
    username: !secret reddit_username
    password: !secret reddit_password
    client_id: !secret reddit_client_id
    client_secret: !secret reddit_client_secret
    sort_by: new
    subreddits:
      - homeassistant

  - platform: places
    name: Martijn Reverse Geocode
    devicetracker_id: device_tracker.life360_martijn
    options: zone, place
    map_provider: google
    map_zoom: 19
    home_zone: zone.thuis
    api_key: !secret email_martijn

  - platform: places
    name: Jildou Reverse Geocode
    devicetracker_id: device_tracker.life360_jildou
    options: zone, place
    map_provider: google
    map_zoom: 19
    home_zone: zone.thuis
    api_key: !secret email_jildou

  - platform: command_line
    name: shopping_list
    command: python3 /config/shopping_list.py

  - platform: discogs
    token: !secret discogs_token
    monitored_conditions:
      - collection
      - wantlist
      - random_record

  - platform: here_travel_time
    app_id: !secret here_app_id
    app_code: !secret here_app_code
    origin_latitude: !secret latitude
    origin_longitude: !secret longitude
    destination_latitude: !secret latitude_work
    destination_longitude: !secret longitude_work
    traffic_mode: true 
    

# Template sensors
  - platform: template 
    sensors:

      life360_martijn_location:
        friendly_name: "Martijn"
        value_template: >-
          {% if is_state('device_tracker.life360_martijn', 'home') %}
            Thuis
          {% elif is_state_attr('device_tracker.life360_martijn', 'moving',true) %}
            Onderweg
          {% elif is_state('device_tracker.life360_martijn', 'not_home') %}
            {{ state_attr("sensor.martijn_reverse_geocode","place_name")|replace("-","") }} {{ states("sensor.martijn_geocode_city")|replace("-","") }}           
          {% else %}
            {{ states("device_tracker.life360_martijn") }}
          {% endif %}

      life360_jildou_location:
        friendly_name: "Jildou"
        value_template: >-
          {% if is_state('device_tracker.life360_jildou', 'home') %}
            Thuis          
          {% elif is_state_attr('device_tracker.life360_jildou','moving',true) %}
            Onderweg
          {% elif is_state('device_tracker.life360_jildou', 'not_home') %}
            {{ state_attr("sensor.jildou_reverse_geocode","place_name")|replace("-","") }} {{ states("sensor.jildou_geocode_city")|replace("-","") }}                 
          {% else %}
            {{ states("device_tracker.life360_jildou") }}
          {% endif %}


#      roomba_status:
#        entity_id: vacuum.roomba
#        value_template: >
#          {{ state_attr("vacuum.roomba","status") }}
#        friendly_name: Status
#        icon_template: 'mdi:checkbox-marked-circle-outline'
      
#      roomba_bin_full:
#        entity_id: vacuum.roomba
#        value_template: >
#          {{ is_state_attr('vacuum.roomba','bin_full',true) }}
#        friendly_name: Bin Full
#        icon_template: 'mdi:trash-can-outline'

#      motion_sensor_battery_level:
#        entity_id: binary_sensor.motion_sensor_wc
#        value_template: >
#          {{ state_attr("binary_sensor.motion_sensor_wc","battery_level") }}
#        friendly_name: Batterij motion sensor
#        unit_of_measurement: '%'
#        icon_template: 'mdi:motion-sensor'

#      motion_sensor2_battery_level:
#        entity_id: binary_sensor.motion_sensor_gang
#        value_template: >
#          {{ state_attr("binary_sensor.motion_sensor_gang","battery_level") }}
#        friendly_name: Batterij motion sensor
#        unit_of_measurement: '%'
#        icon_template: 'mdi:motion-sensor'
      
#      window_door_sensor_battery_level:
#        entity_id: binary_sensor.openclose_14
#        value_template: >
#          {{ state_attr("binary_sensor.openclose_14","battery_level") }}
#        friendly_name: Brievenbus batterij
#        unit_of_measurement: '%'
#        icon_template: 'mdi:mailbox'

      life360_martijn_batterij:
        entity_id: device_tracker.life360_martijn
        value_template: >
          {{ state_attr("device_tracker.life360_martijn","battery") }}
        friendly_name: iPhone batterij
        unit_of_measurement: '%'
        device_class: battery

      life360_martijn_batterij_opladen:
        entity_id: device_tracker.life360_martijn
        value_template: >
          {{ state_attr("device_tracker.life360_martijn","battery_charging") }}
        friendly_name: Battery Charging

      total_sensors:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['sensor'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}

      total_automations:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['automation'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}

      total_scripts:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['script'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}

      total_zones:
        entity_id: sensor.date
        value_template: >
          {%- set domains = ['zone'] -%}
          {%- for domain in domains -%}
            {%- for item in states[domain] -%}
              {% if loop.first %}
                {{loop.length}}
              {% endif %}
            {%- endfor -%}
          {%- endfor -%}

      date_last_boot:
        friendly_name: "Last boot"
        value_template: > 
          {{ as_timestamp(states('sensor.last_boot')) | timestamp_custom("%d-%m-%Y") }}

#      aqara_battery_1:
#        value_template: >
#          {{ state_attr('sensor.aqara_temperature_1' , 'battery_level') }}
#        friendly_name: Badkamer sensor
#        unit_of_measurement: '%'
#        device_class: battery

#      aqara_battery_2:
#        value_template: >
#          {{ state_attr('sensor.aqara_temperature_2' , 'battery_level') }}
#        friendly_name: Slaapkamer sensor
#        unit_of_measurement: '%'
#        device_class: battery
        
#      aqara_battery_3:
#        value_template: >
#          {{ state_attr('sensor.aqara_temperature_3' , 'battery_level') }}
#        friendly_name: Woonkamer sensor
#        unit_of_measurement: '%'
#        device_class: battery

      week_nummer:
        friendly_name: 'Week Nummer'
        entity_id:
          - sensor.date
        value_template: "{{ now().strftime('%U') | int +1 }}"

      dag:
        friendly_name: 'Dag'
        entity_id: 
          - sensor.date
        value_template: "{{ ['Maandag','Dinsdag','Woensdag','Donderdag','Vrijdag','Zaterdag','Zondag'][now().weekday()] }}"

      martijn_geocode_city:
        value_template: "{{ states.sensor.martijn_reverse_geocode.attributes.city }}"

      jildou_geocode_city:
        value_template: "{{ states.sensor.jildou_reverse_geocode.attributes.city }}"

      date_template:
        entity_id: sensor.date
        friendly_name: 'Date'
        value_template: '{{ as_timestamp(now()) | timestamp_custom("%d/%m/%y", True) }}'

      days_after_vacuuming:
        friendly_name: Days after vacuuming
        entity_id: sensor.time
        unit_of_measurement: 'days'
        value_template: "{{ ((as_timestamp(now()) - state_attr('input_datetime.vacuuming','timestamp')) | int / 86400) | round(0) }}"

      days_after_mopping:
        friendly_name: Days after mopping
        entity_id: sensor.time
        unit_of_measurement: 'days'
        value_template: "{{ ((as_timestamp(now()) - state_attr('input_datetime.mopping','timestamp')) | int / 86400) | round(0) }}"

      days_after_cleaning_the_bathroom:
        friendly_name: Days after cleaning the bathroom
        entity_id: sensor.time
        unit_of_measurement: 'days'
        value_template: "{{ ((as_timestamp(now()) - state_attr('input_datetime.cleaning_the_bathroom','timestamp')) | int / 86400) | round(0) }}"

      days_after_clean_the_toilet:
        friendly_name: Days after clean the toilet
        entity_id: sensor.time
        unit_of_measurement: 'days'
        value_template: "{{ ((as_timestamp(now()) - state_attr('input_datetime.clean_the_toilet','timestamp')) | int / 86400) | round(0) }}"

      days_after_dust_off:
        friendly_name: Days after dust off
        entity_id: sensor.time
        unit_of_measurement: 'days'
        value_template: "{{ ((as_timestamp(now()) - state_attr('input_datetime.dust_off','timestamp')) | int / 86400) | round(0) }}"

      days_after_change_bedding:
        friendly_name: Days after change bedding
        entity_id: sensor.time
        unit_of_measurement: 'days'
        value_template: "{{ ((as_timestamp(now()) - state_attr('input_datetime.change_bedding','timestamp')) | int / 86400) | round(0) }}"

      days_after_clean_up_studio:
        friendly_name: Days after clean up studio
        entity_id: sensor.time
        unit_of_measurement: 'days'
        value_template: "{{ ((as_timestamp(now()) - state_attr('input_datetime.clean_up_studio','timestamp')) | int / 86400) | round(0) }}"

      discogs_random:
        entity_id: sensor.discogs_random_record
        value_template: >
          {{ states("sensor.discogs_random_record") }} / {{ state_attr("sensor.discogs_random_record","label") }} ({{ state_attr("sensor.discogs_random_record","cat_no") }}), {{ state_attr("sensor.discogs_random_record","released") }}
        friendly_name: Discogs Random Record